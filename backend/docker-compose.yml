networks:
  appnet: {}

services:

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "15672:15672"
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks: [appnet]

  redis:
    image: redis:7-alpine
    command: redis-server --save 60 1 --loglevel warning
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks: [appnet]

  celery_worker:
    build: .
    command: celery -A services.worker:app worker --loglevel=info
    env_file: .env
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks: [appnet]

  web:
    build: .
    env_file: .env
    command: uvicorn app:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8000:8000"
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      celery_worker:
        condition: service_started
    networks: [appnet]

  chat-mac:
    profiles: ["mac"]
    build: ../frontend
    image: chat-gui:latest
    container_name: chat-gui-mac
    environment:
      - API_BASE=http://web:8000/api          # will resolve via appnet DNS
      - DISPLAY=host.docker.internal:0    # keep for mac/XQuartz
    depends_on:
      web: { condition: service_started }
    networks: [appnet]

volumes:
  rabbitmq_data:
  redis_data: